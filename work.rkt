;	В дефинициите на sum, product и accumulate от слайдовете при всяко рекурсивно 
;	извикване на съответната функция към аргумента a се прибавя 1. Напишете по-общ 
;	вариант на функциите sum, product и accumulate, като добавите нов параметър към 
;	съответната функция, който да пресмята следващата стойност на a. Пример:



;	(define (identity x) x)
;	(define (2+ x) (+ x 2))



;	(sum identity 1 2+ 5) ; 9
;	(product identity 1 2+ 5) ; 15
;	(accumulate + 0 identity 1 2+ 5) ; 9
;	(accumulate * 1 identity 1 2+ 5) ; 15



;	Дефинирайте accumulate чрез итерация.



;	Напишете функция count(predicate, a, b), която връща броя на елементите в 
;	интервала [a, b], за които предикатът predicate е истина. Ако не сте я 
;	имплементирали чрез accumulate, имплементирайте я чрез accumulate.



;	Напишете функция count-palindromes(a, b) , която преброява палиндромите в 
;	нтервала [a, b].



;	Напишете предикат exists?(predicate, a, b), който проверява дали съществува 
;	цяло число в интервала [a, b], за което предикатът predicate е истина.



;	Напишете предикат for-all?(predicate, a, b), който проверява дали за всяко 
;	цяло число в интервала [a, b] предикатът predicate е истина.



;	Напишете функция double, която приема функция на един аргумент и връща функция, 
;	която прилага подадената функция два пъти. Например, ако имаме функцията inc, която добавя 1 към своя аргумент ((define (inc x) (+ x 1)), то (double inc) е функция, която добавя 2 към своя аргумент.



;	Нека f и g са функции на един аргумент. Композицията f ∘ g е функцията x ↦ f(g(x)). 
;	Напишете функция compose(f, g), която връща композицията f ∘ g. Пример:



;	(define (inc x) (+ x 1))
;	(define (square x) (* x x))



;	((compose square inc) 6) ; 49



;	Нека f е функция на един аргумент и n е цяло неотрицателно число. Дефинираме 
;	n-тото прилагане на функцията f да бъде функцията, дефинирана по следния начин:



;	f0(x) = x



;	fn(x) = f(fn-1(x))



;	Напишете функция repeated(f, n), която връща n-тото прилагане на f. Пример:



;	(define (square x) (* x x))



;	((repeated square 2) 5) ; 625



